/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 8 "./model/pthread.h"
typedef int pthread_t;
#line 10 "./model/pthread.h"
typedef int pthread_attr_t;
#line 22 "./model/linux/posix_types.h"
typedef long __kernel_long_t;
#line 23 "./model/linux/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "./model/linux/posix_types.h"
typedef __kernel_ulong_t __kernel_ino_t;
#line 31 "./model/linux/posix_types.h"
typedef unsigned int __kernel_mode_t;
#line 56 "./model/linux/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 57 "./model/linux/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 74 "./model/linux/posix_types.h"
typedef unsigned int __kernel_size_t;
#line 75 "./model/linux/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 8 "./model/linux/types.h"
typedef unsigned char __u8;
#line 11 "./model/linux/types.h"
typedef unsigned short __u16;
#line 14 "./model/linux/types.h"
typedef unsigned int __u32;
#line 20 "./model/linux/types.h"
typedef unsigned char u8;
#line 23 "./model/linux/types.h"
typedef unsigned short u16;
#line 26 "./model/linux/types.h"
typedef unsigned int u32;
#line 29 "./model/linux/types.h"
typedef unsigned long long u64;
#line 42 "./model/linux/types.h"
typedef __u16 __le16;
#line 60 "./model/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 63 "./model/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 64 "./model/linux/types.h"
typedef __kernel_ino_t ino_t;
#line 65 "./model/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 66 "./model/linux/types.h"
typedef unsigned short umode_t;
#line 77 "./model/linux/types.h"
typedef _Bool bool;
#line 79 "./model/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 80 "./model/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 87 "./model/linux/types.h"
typedef long long loff_t;
#line 96 "./model/linux/types.h"
typedef unsigned int size_t;
#line 101 "./model/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 134 "./model/linux/types.h"
typedef unsigned long ulong;
#line 169 "./model/linux/types.h"
typedef unsigned long sector_t;
#line 170 "./model/linux/types.h"
typedef unsigned long blkcnt_t;
#line 189 "./model/linux/types.h"
typedef unsigned int gfp_t;
#line 193 "./model/linux/types.h"
typedef u32 phys_addr_t;
#line 195 "./model/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 197 "./model/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 201
struct hlist_node;
#line 201 "./model/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 205 "./model/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 215 "./model/linux/types.h"
struct __anonstruct_atomic_t_4 {
   int counter ;
};
#line 215 "./model/linux/types.h"
typedef struct __anonstruct_atomic_t_4 atomic_t;
#line 231 "./model/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *head ) ;
};
#line 23 "./model/linux/spinlock.h"
struct __anonstruct_spinlock_t_6 {
   int init ;
   int lock ;
};
#line 23 "./model/linux/spinlock.h"
typedef struct __anonstruct_spinlock_t_6 spinlock_t;
#line 13 "./model/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 13 "./model/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 8 "./model/linux/time.h"
struct timespec {
   long long tv_sec ;
   long tv_nsec ;
};
#line 20 "./model/linux/uidgid.h"
struct __anonstruct_kuid_t_8 {
   uid_t val ;
};
#line 20 "./model/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_8 kuid_t;
#line 25 "./model/linux/uidgid.h"
struct __anonstruct_kgid_t_9 {
   gid_t val ;
};
#line 25 "./model/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_9 kgid_t;
#line 42 "./model/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 25 "./model/linux/mutex.h"
struct mutex {
   int init ;
   int locked ;
};
#line 218 "./model/asm/pgtable_types.h"
struct __anonstruct_pgprot_t_18 {
   unsigned long pgprot ;
};
#line 218 "./model/asm/pgtable_types.h"
typedef struct __anonstruct_pgprot_t_18 pgprot_t;
#line 363
struct page;
#line 376
struct file;
#line 376
struct file;
#line 391
struct seq_file;
#line 391
struct seq_file;
#line 6 "./model/linux/mm_types.h"
struct page {
   void *data ;
};
#line 10 "./model/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   pgprot_t vm_page_prot ;
   unsigned long vm_pgoff ;
};
#line 33 "./model/linux/list_bl.h"
struct hlist_bl_node;
#line 37 "./model/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 13 "./model/linux/dcache.h"
struct nameidata;
#line 13
struct nameidata;
#line 14
struct path;
#line 14
struct path;
#line 15
struct vfsmount;
#line 15
struct vfsmount;
#line 42 "./model/linux/dcache.h"
struct __anonstruct____missing_field_name_23 {
   u32 hash ;
   u32 len ;
};
#line 42 "./model/linux/dcache.h"
union __anonunion____missing_field_name_22 {
   struct __anonstruct____missing_field_name_23 __annonCompField1 ;
   u64 hash_len ;
};
#line 42 "./model/linux/dcache.h"
struct qstr {
   union __anonunion____missing_field_name_22 __annonCompField2 ;
   unsigned char const   *name ;
};
#line 103
struct inode;
#line 103
struct dentry_operations;
#line 103
struct super_block;
#line 103 "./model/linux/dcache.h"
union __anonunion_d_u_24 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 103 "./model/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[40] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_24 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 146 "./model/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_weak_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 136 "./model/linux/fs.h"
struct kiocb;
#line 136
struct kiocb;
#line 137
struct writeback_control;
#line 137
struct writeback_control;
#line 138
struct kstatfs;
#line 138
struct kstatfs;
#line 143
struct iovec;
#line 143
struct iovec;
#line 144
struct poll_table_struct;
#line 144
struct poll_table_struct;
#line 145
struct vm_area_struct;
#line 147
struct page;
#line 148
struct seq_file;
#line 150
struct address_space_operations;
#line 150 "./model/linux/fs.h"
struct address_space {
   struct inode *host ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 165
struct file_operations;
#line 165 "./model/linux/fs.h"
struct file {
   struct dentry *f_dentry ;
   struct file_operations *f_op ;
   atomic_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   void *private_data ;
   struct address_space *f_mapping ;
};
#line 176
struct gendisk;
#line 176 "./model/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct gendisk *bd_disk ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
};
#line 185
struct inode_operations;
#line 185
struct cdev;
#line 185 "./model/linux/fs.h"
union __anonunion____missing_field_name_25 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 185 "./model/linux/fs.h"
union __anonunion____missing_field_name_26 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 185 "./model/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   unsigned int i_flags ;
   unsigned long i_ino ;
   struct address_space *i_mapping ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct block_device *i_bdev ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct cdev *i_cdev ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   struct address_space i_data ;
   union __anonunion____missing_field_name_25 __annonCompField3 ;
   union __anonunion____missing_field_name_26 __annonCompField4 ;
};
#line 225 "./model/linux/fs.h"
struct __anonstruct_read_descriptor_t_27 {
   size_t written ;
   size_t count ;
};
#line 225 "./model/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_27 read_descriptor_t;
#line 233 "./model/linux/fs.h"
struct file_lock {
   int something ;
};
#line 237
struct module;
#line 237 "./model/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , ino_t  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*readv)(struct file * , struct iovec  const  * , unsigned long  , loff_t * ) ;
   ssize_t (*writev)(struct file * , struct iovec  const  * , unsigned long  , loff_t * ) ;
   ssize_t (*sendfile)(struct file * , loff_t * , size_t  , int (*)(read_descriptor_t * ,
                                                                    struct page * ,
                                                                    unsigned long  ,
                                                                    unsigned long  ) ,
                       void * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file *filp , unsigned long arg ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   int (*open_exec)(struct inode * ) ;
};
#line 295 "./model/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int flags ) ;
   int (*write_inode)(struct inode * , struct writeback_control *wbc ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 324 "./model/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
};
#line 341
struct dquot_operations;
#line 341
struct quotactl_ops;
#line 341
struct export_operations;
#line 341 "./model/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   int s_count ;
   atomic_t s_active ;
   struct list_head s_inodes ;
   struct list_head s_files ;
   struct list_head s_mounts ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   char s_id[32] ;
   u8 s_uuid[16] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   int cleancache_poolid ;
   int s_readonly_remount ;
};
#line 384
struct swap_info_struct;
#line 384
struct swap_info_struct;
#line 385
enum migrate_mode {
    X = 0
} ;
#line 387 "./model/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct *sis , struct file *file , sector_t *span ) ;
   void (*swap_deactivate)(struct file *file ) ;
};
#line 434
struct fiemap_extent_info;
#line 434
struct fiemap_extent_info;
#line 435
struct iattr;
#line 435
struct iattr;
#line 437
struct posix_acl;
#line 437 "./model/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int open_flag ,
                      umode_t create_mode , int *opened ) ;
};
#line 11 "./model/linux/ioport.h"
struct resource {
   unsigned long start ;
   unsigned long end ;
   char const   *name ;
   unsigned long flags ;
};
#line 7 "./model/linux/workqueue.h"
struct work_struct {
   void (*func)(void * ) ;
   void *data ;
};
#line 9 "./model/linux/pm.h"
struct device;
#line 9
struct device;
#line 11 "./model/linux/pm.h"
struct pm_message {
   int event ;
};
#line 11 "./model/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 15 "./model/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_late)(struct device *dev ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*freeze_late)(struct device *dev ) ;
   int (*thaw_early)(struct device *dev ) ;
   int (*poweroff_late)(struct device *dev ) ;
   int (*restore_early)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
   int (*runtime_suspend)(struct device *dev ) ;
   int (*runtime_resume)(struct device *dev ) ;
   int (*runtime_idle)(struct device *dev ) ;
};
#line 31 "./model/linux/idr.h"
union __anonunion____missing_field_name_29 {
   unsigned long bitmap[(((unsigned long )(1 << 8) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   struct callback_head callback_head ;
};
#line 31 "./model/linux/idr.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[1 << 8] ;
   int count ;
   union __anonunion____missing_field_name_29 __annonCompField5 ;
};
#line 43 "./model/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};
#line 150 "./model/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[128UL / sizeof(long ) - 1UL] ;
};
#line 155 "./model/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};
#line 4 "./model/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 10 "./model/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 35 "./model/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
};
#line 39 "./model/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 21 "./model/linux/kernfs.h"
struct file;
#line 22
struct dentry;
#line 23
struct iattr;
#line 24
struct seq_file;
#line 25
struct vm_area_struct;
#line 26
struct super_block;
#line 27
struct file_system_type;
#line 29
struct kernfs_open_node;
#line 29
struct kernfs_open_node;
#line 30
struct kernfs_iattrs;
#line 30
struct kernfs_iattrs;
#line 74
struct kernfs_root;
#line 74 "./model/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 86
struct kernfs_node;
#line 86 "./model/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 90
struct kernfs_ops;
#line 90 "./model/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops  const  *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 106 "./model/linux/kernfs.h"
union __anonunion____missing_field_name_30 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 106 "./model/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct kernfs_node *parent ;
   char const   *name ;
   struct rb_node rb ;
   void const   *ns ;
   unsigned int hash ;
   union __anonunion____missing_field_name_30 __annonCompField6 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};
#line 146 "./model/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *root , int *flags , char *data ) ;
   int (*show_options)(struct seq_file *sf , struct kernfs_root *root ) ;
   int (*mkdir)(struct kernfs_node *parent , char const   *name , umode_t mode ) ;
   int (*rmdir)(struct kernfs_node *kn ) ;
   int (*rename)(struct kernfs_node *kn , struct kernfs_node *new_parent , char const   *new_name ) ;
};
#line 157 "./model/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 172
struct vm_operations_struct;
#line 172 "./model/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct  const  *vm_ops ;
};
#line 189 "./model/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *sf , void *v ) ;
   void *(*seq_start)(struct seq_file *sf , loff_t *ppos ) ;
   void *(*seq_next)(struct seq_file *sf , void *v , loff_t *ppos ) ;
   void (*seq_stop)(struct seq_file *sf , void *v ) ;
   ssize_t (*read)(struct kernfs_open_file *of , char *buf , size_t bytes , loff_t off ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *of , char *buf , size_t bytes , loff_t off ) ;
   int (*mmap)(struct kernfs_open_file *of , struct vm_area_struct *vma ) ;
};
#line 20 "./model/linux/kobject_ns.h"
struct sock;
#line 20
struct sock;
#line 21
struct kobject;
#line 21
struct kobject;
#line 27
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 40 "./model/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock *sk ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 24 "./model/linux/sysfs.h"
struct kobject;
#line 25
struct module;
#line 26
struct bin_attribute;
#line 26
struct bin_attribute;
#line 27
enum kobj_ns_type;
#line 29 "./model/linux/sysfs.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
};
#line 60 "./model/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 127
struct file;
#line 128
struct vm_area_struct;
#line 130 "./model/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute *attr , struct vm_area_struct *vma ) ;
};
#line 184 "./model/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 24 "./model/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 63 "./model/linux/kobject.h"
struct kset;
#line 63
struct kobj_type;
#line 63 "./model/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 117 "./model/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject *kobj ) ;
   void const   *(*namespace)(struct kobject *kobj ) ;
};
#line 125 "./model/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3] ;
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 133 "./model/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(* const  name)(struct kset *kset , struct kobject *kobj ) ;
   int (* const  uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 150
struct sock;
#line 169 "./model/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 23 "./model/linux/device.h"
struct device_driver;
#line 23
struct device_driver;
#line 25 "./model/linux/device.h"
struct device_private {
   void *driver_data ;
   struct device *device ;
};
#line 30
struct device_node;
#line 30 "./model/linux/device.h"
struct device {
   struct device *parent ;
   struct kobject kobj ;
   struct device_private *p ;
   struct device_driver *driver ;
   void *platform_data ;
   struct device_node *of_node ;
   void (*release)(struct device *dev ) ;
   char *init_name ;
};
#line 43
struct of_device_id;
#line 43 "./model/linux/device.h"
struct device_driver {
   char const   *name ;
   struct module *owner ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
};
#line 6 "./model/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 60 "./model/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 bInterfaceNumber ;
   kernel_ulong_t driver_info  __attribute__((__aligned__(sizeof(kernel_ulong_t )))) ;
};
#line 20 "./model/linux/platform_device.h"
struct mfd_cell;
#line 20
struct mfd_cell;
#line 22 "./model/linux/platform_device.h"
struct pdev_archdata {

};
#line 24
struct platform_device_id;
#line 24 "./model/linux/platform_device.h"
struct platform_device {
   char const   *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id  const  *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 34 "./model/linux/pci.h"
struct pci_bus;
#line 34 "./model/linux/pci.h"
struct pci_dev {
   struct pci_bus *bus ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   u8 revision ;
   u64 dma_mask ;
   struct device dev ;
   unsigned int irq ;
   struct resource resource[11] ;
   unsigned int transparent : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_added : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int is_pcie : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
};
#line 81
struct module;
#line 10 "./model/linux/poll.h"
struct poll_table_struct {
   int something ;
};
#line 10 "./model/linux/poll.h"
typedef struct poll_table_struct poll_table;
#line 4 "./model/linux/cdev.h"
struct cdev {
   struct module *owner ;
   struct file_operations *ops ;
   dev_t dev ;
   unsigned int count ;
};
#line 57 "./model/asm/alternative.h"
struct module;
#line 188 "./model/linux/tty.h"
struct device;
#line 350 "./model/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
#line 368 "./model/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
#line 616 "./model/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __le16 wBytesPerInterval ;
} __attribute__((__packed__)) ;
#line 695 "./model/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
#line 24 "./model/linux/usb.h"
struct usb_driver;
#line 24
struct usb_driver;
#line 46
struct ep_device;
#line 46
struct ep_device;
#line 64 "./model/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct usb_ss_ep_comp_descriptor ss_ep_comp ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
   int streams ;
};
#line 78 "./model/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   int extralen ;
   unsigned char *extra ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
};
#line 92
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 157 "./model/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int ep_devs_created : 1 ;
   unsigned int unregistering : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   unsigned int needs_altsetting0 : 1 ;
   unsigned int needs_binding : 1 ;
   unsigned int resetting_device : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   atomic_t pm_usage_cnt ;
   struct work_struct reset_ws ;
};
#line 964 "./model/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 986 "./model/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 1055 "./model/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface *intf , struct usb_device_id  const  *id ) ;
   void (*disconnect)(struct usb_interface *intf ) ;
   int (*unlocked_ioctl)(struct usb_interface *intf , unsigned int code , void *buf ) ;
   int (*suspend)(struct usb_interface *intf , pm_message_t message ) ;
   int (*resume)(struct usb_interface *intf ) ;
   int (*reset_resume)(struct usb_interface *intf ) ;
   int (*pre_reset)(struct usb_interface *intf ) ;
   int (*post_reset)(struct usb_interface *intf ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned int no_dynamic_id : 1 ;
   unsigned int supports_autosuspend : 1 ;
   unsigned int disable_hub_initiated_lpm : 1 ;
   unsigned int soft_unbind : 1 ;
};
#line 145 "./model/asm/x86_init.h"
struct timespec;
#line 6 "./model/linux/mmdebug.h"
struct page;
#line 7
struct vm_area_struct;
#line 727 "./model/asm/pgtable.h"
struct vm_area_struct;
#line 14 "./model/asm/sn/tiocx.h"
struct cx_id_s {
   unsigned int part_num ;
   unsigned int mfg_num ;
   int nasid ;
};
#line 20
struct hubdev_info;
#line 20
struct cx_drv;
#line 20 "./model/asm/sn/tiocx.h"
struct cx_dev {
   struct cx_id_s cx_id ;
   int bt ;
   void *soft ;
   struct hubdev_info *hubdev ;
   struct device dev ;
   struct cx_drv *driver ;
};
#line 29 "./model/asm/sn/tiocx.h"
struct cx_device_id {
   unsigned int part_num ;
   unsigned int mfg_num ;
};
#line 34 "./model/asm/sn/tiocx.h"
struct cx_drv {
   char *name ;
   struct cx_device_id  const  *id_table ;
   struct device_driver driver ;
   int (*probe)(struct cx_dev *dev , struct cx_device_id  const  *id ) ;
   int (*remove)(struct cx_dev *dev ) ;
};
#line 22 "./model/linux/nsc_gpio.h"
struct nsc_gpio_ops {
   struct module *owner ;
   u32 (*gpio_config)(unsigned int iminor , u32 mask , u32 bits ) ;
   void (*gpio_dump)(struct nsc_gpio_ops *amp , unsigned int iminor ) ;
   int (*gpio_get)(unsigned int iminor ) ;
   void (*gpio_set)(unsigned int iminor , int state ) ;
   void (*gpio_change)(unsigned int iminor ) ;
   int (*gpio_current)(unsigned int iminor ) ;
   struct device *dev ;
};
#line 12 "./model/pthread.h"
extern int pthread_create(pthread_t *thread , pthread_attr_t const   *attr , void *(*start_routine)(void * ) ,
                          void *arg ) ;
#line 15
extern int pthread_join(pthread_t thread , void **value_ptr ) ;
#line 11 "./model/svcomp.h"
extern _Bool __VERIFIER_nondet_bool(void) ;
#line 14
extern int __VERIFIER_nondet_int(void) ;
#line 15
extern ulong __VERIFIER_nondet_ulong(void) ;
#line 18
extern void __VERIFIER_atomic_begin(void) ;
#line 20
extern void __VERIFIER_atomic_end(void) ;
#line 22
extern  __attribute__((__noreturn__)) void __VERIFIER_error() ;
#line 24
extern void __VERIFIER_assume(int  ) ;
#line 26 "./model/svcomp.h"
void __VERIFIER_assert(int cond ) 
{ 


  {
#line 27
  if (! cond) {
    {
#line 28
    __VERIFIER_error();
    }
  } else {

  }
#line 30
  return;
}
}
#line 18 "./model/linux/init.h"
int (*_whoop_init)(void) ;
#line 19
void (*_whoop_exit)(void) ;
#line 38 "./model/linux/thread_info.h"
extern void *malloc(unsigned int  ) ;
#line 31 "./model/linux/spinlock.h"
void spin_lock_init(spinlock_t *lock ) 
{ 


  {
#line 33
  lock->init = 1;
#line 34
  lock->lock = 0;
#line 35
  return;
}
}
#line 37 "./model/linux/spinlock.h"
void spin_lock(spinlock_t *lock ) 
{ 


  {
  {
#line 41
  __VERIFIER_atomic_begin();
#line 42
  __VERIFIER_assume(lock->lock == 0);
#line 43
  lock->lock = 1;
#line 44
  __VERIFIER_atomic_end();
  }
#line 45
  return;
}
}
#line 47 "./model/linux/spinlock.h"
void spin_lock_irqsave(spinlock_t *lock , unsigned long value ) 
{ 


  {
  {
#line 51
  __VERIFIER_atomic_begin();
#line 52
  __VERIFIER_assume(lock->lock == 0);
#line 53
  lock->lock = 1;
#line 54
  __VERIFIER_atomic_end();
  }
#line 55
  return;
}
}
#line 57 "./model/linux/spinlock.h"
void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
  {
#line 61
  __VERIFIER_atomic_begin();
#line 62
  __VERIFIER_assume(lock->lock == 0);
#line 63
  lock->lock = 1;
#line 64
  __VERIFIER_atomic_end();
  }
#line 65
  return;
}
}
#line 67 "./model/linux/spinlock.h"
void spin_lock_bh(spinlock_t *lock ) 
{ 


  {
  {
#line 71
  __VERIFIER_atomic_begin();
#line 72
  __VERIFIER_assume(lock->lock == 0);
#line 73
  lock->lock = 1;
#line 74
  __VERIFIER_atomic_end();
  }
#line 75
  return;
}
}
#line 77 "./model/linux/spinlock.h"
void spin_unlock(spinlock_t *lock ) 
{ 


  {
  {
#line 81
  __VERIFIER_atomic_begin();
#line 82
  lock->lock = 0;
#line 83
  __VERIFIER_atomic_end();
  }
#line 84
  return;
}
}
#line 86 "./model/linux/spinlock.h"
void spin_unlock_irqrestore(spinlock_t *lock , unsigned long value ) 
{ 


  {
  {
#line 90
  __VERIFIER_atomic_begin();
#line 91
  lock->lock = 0;
#line 92
  __VERIFIER_atomic_end();
  }
#line 93
  return;
}
}
#line 95 "./model/linux/spinlock.h"
void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
  {
#line 99
  __VERIFIER_atomic_begin();
#line 100
  lock->lock = 0;
#line 101
  __VERIFIER_atomic_end();
  }
#line 102
  return;
}
}
#line 104 "./model/linux/spinlock.h"
void spin_unlock_bh(spinlock_t *lock ) 
{ 


  {
  {
#line 108
  __VERIFIER_atomic_begin();
#line 109
  lock->lock = 0;
#line 110
  __VERIFIER_atomic_end();
  }
#line 111
  return;
}
}
#line 141 "./model/linux/time.h"
extern struct timespec current_kernel_time(void) ;
#line 184
extern struct timespec timespec_trunc(struct timespec t , unsigned int gran ) ;
#line 34 "./model/linux/mutex.h"
void mutex_init(struct mutex *lock ) 
{ 


  {
#line 36
  lock->locked = 0;
#line 37
  lock->init = 1;
#line 38
  return;
}
}
#line 40 "./model/linux/mutex.h"
void mutex_lock(struct mutex *lock ) 
{ 


  {
  {
#line 44
  __VERIFIER_atomic_begin();
#line 45
  __VERIFIER_assume(lock->locked == 0);
#line 46
  lock->locked = 1;
#line 47
  __VERIFIER_atomic_end();
  }
#line 48
  return;
}
}
#line 50 "./model/linux/mutex.h"
bool mutex_lock_interruptible(struct mutex *lock ) 
{ 
  bool ret ;
  _Bool tmp ;

  {
  {
#line 52
  tmp = __VERIFIER_nondet_bool();
#line 52
  ret = tmp;
  }
#line 53
  if (! ret) {
    {
#line 56
    __VERIFIER_atomic_begin();
#line 57
    __VERIFIER_assume(lock->locked == 0);
#line 58
    lock->locked = 1;
#line 59
    __VERIFIER_atomic_end();
    }
  } else {

  }
#line 61
  return (ret);
}
}
#line 64 "./model/linux/mutex.h"
void mutex_unlock(struct mutex *lock ) 
{ 


  {
  {
#line 68
  __VERIFIER_atomic_begin();
#line 69
  lock->locked = 0;
#line 70
  __VERIFIER_atomic_end();
  }
#line 71
  return;
}
}
#line 6 "./model/linux/jiffies.h"
unsigned long jiffies  ;
#line 474 "./model/linux/fs.h"
extern int alloc_chrdev_region(dev_t * , unsigned int  , unsigned int  , char const   * ) ;
#line 475
extern int register_chrdev_region(dev_t  , unsigned int  , char const   * ) ;
#line 476
extern void unregister_chrdev_region(dev_t  , unsigned int  ) ;
#line 492 "./model/linux/fs.h"
static unsigned int ( __attribute__((__always_inline__)) iminor)(struct inode *inode ) 
{ 


  {
#line 494
  return (inode->i_rdev & ((1U << 20) - 1U));
}
}
#line 502
extern loff_t no_llseek(struct file *file , loff_t offset , int origin ) ;
#line 511
int nonseekable_open(struct inode *inode , struct file *filp ) ;
#line 554 "./model/linux/fs.h"
struct timespec current_fs_time(struct super_block *sb ) 
{ 
  struct timespec now ;
  struct timespec tmp ;
  struct timespec tmp___0 ;

  {
  {
#line 556
  tmp = current_kernel_time();
#line 556
  now = tmp;
#line 557
  tmp___0 = timespec_trunc(now, sb->s_time_gran);
  }
#line 557
  return (tmp___0);
}
}
#line 95 "./model/linux/ioport.h"
extern void __release_region(struct resource * , resource_size_t  , resource_size_t  ) ;
#line 96
extern struct resource *__request_region(struct resource * , resource_size_t start ,
                                         resource_size_t n , char const   *name ,
                                         int flags ) ;
#line 47 "./model/linux/platform_device.h"
extern void platform_device_unregister(struct platform_device * ) ;
#line 166
extern struct platform_device *platform_device_alloc(char const   *name , int id ) ;
#line 172
extern int platform_device_add(struct platform_device *pdev ) ;
#line 173
extern void platform_device_del(struct platform_device *pdev ) ;
#line 174
extern void platform_device_put(struct platform_device *pdev ) ;
#line 26 "./model/linux/string.h"
extern void *memcpy(void * , void const   * , __kernel_size_t  ) ;
#line 24 "./model/linux/uaccess.h"
unsigned long copy_to_user(void *to , void const   *from , unsigned long n ) 
{ 
  ulong tmp ;

  {
  {
#line 26
  tmp = __VERIFIER_nondet_ulong();
  }
#line 26
  return (tmp);
}
}
#line 29 "./model/linux/uaccess.h"
unsigned long copy_from_user(void *to , void *from , unsigned long n ) 
{ 
  ulong tmp ;

  {
  {
#line 31
  tmp = __VERIFIER_nondet_ulong();
  }
#line 31
  return (tmp);
}
}
#line 11 "./model/linux/cdev.h"
extern void cdev_init(struct cdev * , struct file_operations * ) ;
#line 17
int cdev_add(struct cdev *dev , dev_t d , unsigned int n ) ;
#line 19
void cdev_del(struct cdev *dev ) ;
#line 1142 "./model/linux/usb.h"
extern int usb_register_driver(struct usb_driver *driver , struct module *module ,
                               char const   *modname ) 
{ 
  int tmp ;

  {
  {
#line 1145
  tmp = __VERIFIER_nondet_int();
  }
#line 1145
  return (tmp);
}
}
#line 8 "./model/asm/io.h"
void *ioremap(unsigned long offset , unsigned long size ) 
{ 
  void *memory ;
  void *tmp ;

  {
  {
#line 10
  tmp = malloc(size);
#line 10
  memory = tmp;
  }
#line 11
  return (memory);
}
}
#line 24
extern unsigned char inb_p(unsigned int  ) ;
#line 25
extern void outb_p(unsigned char value , unsigned int  ) ;
#line 40 "./model/asm/io.h"
unsigned char readb(void const   *addr ) 
{ 


  {
#line 42
  return (*((u8 *)addr));
}
}
#line 45 "./model/asm/io.h"
unsigned short readw(void const   *addr ) 
{ 


  {
#line 47
  return (*((u16 *)addr));
}
}
#line 50 "./model/asm/io.h"
unsigned int readl(void const   *addr ) 
{ 


  {
#line 52
  return (*((u32 *)addr));
}
}
#line 55 "./model/asm/io.h"
void writeb(unsigned char value , void *addr ) 
{ 


  {
#line 57
  *((u8 *)addr) = value;
#line 58
  return;
}
}
#line 60 "./model/asm/io.h"
void writew(unsigned short value , void *addr ) 
{ 


  {
#line 62
  *((u16 *)addr) = value;
#line 63
  return;
}
}
#line 65 "./model/asm/io.h"
void writel(unsigned int value , void *addr ) 
{ 


  {
#line 67
  *((u32 *)addr) = value;
#line 68
  return;
}
}
#line 70 "./model/asm/io.h"
unsigned int ioread8(void *addr ) 
{ 
  unsigned char tmp ;

  {
  {
#line 72
  tmp = readb(addr);
  }
#line 72
  return (tmp);
}
}
#line 75 "./model/asm/io.h"
unsigned int ioread16(void *addr ) 
{ 
  unsigned short tmp ;

  {
  {
#line 77
  tmp = readw(addr);
  }
#line 77
  return (tmp);
}
}
#line 80 "./model/asm/io.h"
unsigned int ioread32(void *addr ) 
{ 
  unsigned int tmp ;

  {
  {
#line 82
  tmp = readl(addr);
  }
#line 82
  return (tmp);
}
}
#line 108 "./model/asm/io.h"
void memcpy_fromio(void *dst , void const volatile   *src , size_t count ) 
{ 


  {
  {
#line 110
  memcpy(dst, (void const   *)src, count);
  }
#line 111
  return;
}
}
#line 33 "./model/linux/nsc_gpio.h"
extern ssize_t nsc_gpio_write(struct file *file , char const   *data , size_t len ,
                              loff_t *ppos ) ;
#line 36
extern ssize_t nsc_gpio_read(struct file *file , char *buf , size_t len , loff_t *ppos ) ;
#line 39
extern void nsc_gpio_dump(struct nsc_gpio_ops *amp , unsigned int index ) ;
#line 30 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static int major  ;
#line 32 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static struct mutex pc8736x_gpio_config_lock  =    {1, 0};
#line 33 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static unsigned int pc8736x_gpio_base  ;
#line 34 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static u8 pc8736x_gpio_shadow[4]  ;
#line 63 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static unsigned char superio_cmd  =    0;
#line 64 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static unsigned char selected_device  =    255;
#line 67 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static int port_offset[4]  = {      0,      4,      8,      10};
#line 75 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static struct platform_device *pdev  ;
#line 77 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static void ( __attribute__((__always_inline__)) superio_outb)(int addr , int val ) 
{ 


  {
  {
#line 79
  outb_p(addr, superio_cmd);
#line 80
  outb_p(val, (int )superio_cmd + 1);
  }
#line 81
  return;
}
}
#line 83 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static int ( __attribute__((__always_inline__)) superio_inb)(int addr ) 
{ 
  unsigned char tmp ;

  {
  {
#line 85
  outb_p(addr, superio_cmd);
#line 86
  tmp = inb_p((int )superio_cmd + 1);
  }
#line 86
  return (tmp);
}
}
#line 89 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static int pc8736x_superio_present(void) 
{ 
  int id ;

  {
  {
#line 94
  superio_cmd = 46;
#line 95
  id = superio_inb(32);
  }
#line 96
  if (id == 229 || id == 233) {
#line 97
    return (superio_cmd);
  } else {

  }
  {
#line 99
  superio_cmd = 78;
#line 100
  id = superio_inb(32);
  }
#line 101
  if (id == 229 || id == 233) {
#line 102
    return (superio_cmd);
  } else {

  }
#line 104
  return (0);
}
}
#line 107 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static void device_select(unsigned int devldn ) 
{ 


  {
  {
#line 109
  superio_outb(7, devldn);
#line 110
  selected_device = devldn;
  }
#line 111
  return;
}
}
#line 113 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static void select_pin(unsigned int iminor___0 ) 
{ 


  {
  {
#line 116
  device_select(7);
#line 117
  superio_outb(240, ((iminor___0 << 1) & 240U) | (iminor___0 & 7U));
  }
#line 119
  return;
}
}
#line 121 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static u32 ( __attribute__((__always_inline__)) pc8736x_gpio_configure_fn)(unsigned int index ,
                                                                           u32 mask ,
                                                                           u32 bits ,
                                                                           u32 func_slct ) 
{ 
  u32 config ;
  u32 new_config ;
  int tmp ;

  {
  {
#line 126
  mutex_lock(& pc8736x_gpio_config_lock);
#line 128
  device_select(7);
#line 129
  select_pin(index);
#line 132
  tmp = superio_inb(func_slct);
#line 132
  config = tmp;
#line 135
  new_config = (config & mask) | bits;
#line 136
  superio_outb(func_slct, new_config);
#line 138
  mutex_unlock(& pc8736x_gpio_config_lock);
  }
#line 140
  return (config);
}
}
#line 143 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
u32 pc8736x_gpio_configure(unsigned int index , u32 mask , u32 bits ) 
{ 
  u32 tmp ;

  {
  {
#line 145
  tmp = pc8736x_gpio_configure_fn(index, mask, bits, 241);
  }
#line 145
  return (tmp);
}
}
#line 149 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int pc8736x_gpio_get(unsigned int minor ) 
{ 
  int port ;
  int bit ;
  int val ;
  unsigned char tmp ;

  {
  {
#line 153
  mutex_lock(& pc8736x_gpio_config_lock);
#line 154
  port = minor >> 3;
#line 155
  bit = minor & 7U;
#line 156
  tmp = inb_p((pc8736x_gpio_base + (unsigned int )port_offset[port]) + 1U);
#line 156
  val = tmp;
#line 157
  val = val >> bit;
#line 158
  val = val & 1;
  }
  {
#line 160
  while (1) {
    while_continue: /* CIL Label */ ;
#line 160
    goto while_break;
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 163
  mutex_unlock(& pc8736x_gpio_config_lock);
  }
#line 165
  return (val);
}
}
#line 168 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void pc8736x_gpio_set(unsigned int minor , int val ) 
{ 
  int port ;
  int bit ;
  int curval ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;

  {
  {
#line 172
  minor = minor & 31U;
#line 173
  port = minor >> 3;
#line 174
  bit = minor & 7U;
#line 176
  mutex_lock(& pc8736x_gpio_config_lock);
#line 177
  tmp = inb_p(pc8736x_gpio_base + (unsigned int )port_offset[port]);
#line 177
  curval = tmp;
  }
  {
#line 179
  while (1) {
    while_continue: /* CIL Label */ ;
#line 179
    goto while_break;
  }
  while_break: /* CIL Label */ ;
  }
#line 183
  val = (curval & ~ (1 << bit)) | (val << bit);
  {
#line 185
  while (1) {
    while_continue___0: /* CIL Label */ ;
#line 185
    goto while_break___0;
  }
  while_break___0: /* CIL Label */ ;
  }
  {
#line 188
  outb_p(val, pc8736x_gpio_base + (unsigned int )port_offset[port]);
#line 190
  tmp___0 = inb_p(pc8736x_gpio_base + (unsigned int )port_offset[port]);
#line 190
  curval = tmp___0;
#line 191
  tmp___1 = inb_p((pc8736x_gpio_base + (unsigned int )port_offset[port]) + 1U);
#line 191
  val = tmp___1;
  }
  {
#line 193
  while (1) {
    while_continue___1: /* CIL Label */ ;
#line 193
    goto while_break___1;
  }
  while_break___1: /* CIL Label */ ;
  }
  {
#line 194
  pc8736x_gpio_shadow[port] = val;
#line 195
  __VERIFIER_assert((int )pc8736x_gpio_shadow[port] == val);
#line 196
  mutex_unlock(& pc8736x_gpio_config_lock);
  }
#line 197
  return;
}
}
#line 199 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int pc8736x_gpio_current(unsigned int minor ) 
{ 
  int port ;
  int bit ;
  u8 tmp ;

  {
  {
#line 202
  minor = minor & 31U;
#line 203
  port = minor >> 3;
#line 204
  bit = minor & 7U;
#line 205
  mutex_lock(& pc8736x_gpio_config_lock);
#line 206
  tmp = pc8736x_gpio_shadow[port];
#line 207
  __VERIFIER_assert((int )tmp == (int )pc8736x_gpio_shadow[port]);
#line 208
  mutex_unlock(& pc8736x_gpio_config_lock);
  }
#line 209
  return (((int )tmp >> bit) & 1);
}
}
#line 212 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void pc8736x_gpio_change(unsigned int index ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 214
  tmp = pc8736x_gpio_current(index);
  }
#line 214
  if (tmp) {
#line 214
    tmp___0 = 0;
  } else {
#line 214
    tmp___0 = 1;
  }
  {
#line 214
  pc8736x_gpio_set(index, tmp___0);
  }
#line 215
  return;
}
}
#line 217 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static struct nsc_gpio_ops pc8736x_gpio_ops  = 
#line 217
     {(struct module *)0, & pc8736x_gpio_configure, & nsc_gpio_dump, & pc8736x_gpio_get,
    & pc8736x_gpio_set, & pc8736x_gpio_change, & pc8736x_gpio_current, 0};
#line 227 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int pc8736x_gpio_open(struct inode *inode , struct file *file ) 
{ 
  unsigned int m ;
  unsigned int tmp ;
  int ret ;
  int tmp___0 ;
  int port ;
  int tmp___1 ;
  u8 tmp___2 ;
  int tmp___3 ;

  {
  {
#line 229
  tmp = iminor(inode);
#line 229
  m = tmp;
#line 230
  file->private_data = & pc8736x_gpio_ops;
#line 231
  __VERIFIER_assert((unsigned long )file->private_data == (unsigned long )(& pc8736x_gpio_ops));
  }
  {
#line 234
  while (1) {
    while_continue: /* CIL Label */ ;
#line 234
    goto while_break;
  }
  while_break: /* CIL Label */ ;
  }
#line 236
  if (m >= 32U) {
#line 237
    return (-22);
  } else {

  }
  {
#line 238
  tmp___0 = nonseekable_open(inode, file);
#line 238
  ret = tmp___0;
  }
#line 239
  if (ret != 0) {
    {
#line 241
    tmp___1 = __VERIFIER_nondet_int();
#line 241
    port = tmp___1;
#line 242
    __VERIFIER_assume(port >= 0 && port < 4);
#line 243
    tmp___3 = __VERIFIER_nondet_int();
#line 243
    tmp___2 = (u8 )tmp___3;
#line 244
    pc8736x_gpio_shadow[port] = tmp___2;
#line 245
    __VERIFIER_assert((int )pc8736x_gpio_shadow[port] == (int )tmp___2);
    }
  } else {

  }
#line 247
  return (ret);
}
}
#line 250 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static struct file_operations pc8736x_gpio_fileops  = 
#line 250
     {(struct module *)0, & no_llseek, & nsc_gpio_read, & nsc_gpio_write, 0, 0, 0, 0,
    0, 0, & pc8736x_gpio_open, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 258 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static void pc8736x_init_shadow(void) 
{ 
  int port ;

  {
#line 263
  port = 0;
  {
#line 263
  while (1) {
    while_continue: /* CIL Label */ ;
#line 263
    if (port < 4) {

    } else {
#line 263
      goto while_break;
    }
    {
#line 264
    pc8736x_gpio_shadow[port] = inb_p(pc8736x_gpio_base + (unsigned int )port_offset[port]);
#line 263
    port = port + 1;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 268
  return;
}
}
#line 270 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
static struct cdev pc8736x_gpio_cdev  ;
#line 274 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct inode *whoop_inode_0  ;
#line 275 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct file *whoop_file_0  ;
#line 276 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct inode *whoop_inode_1  ;
#line 277 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct file *whoop_file_1  ;
#line 278 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct inode *whoop_inode_2  ;
#line 279 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct file *whoop_file_2  ;
#line 280 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct inode *whoop_inode_3  ;
#line 281 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct file *whoop_file_3  ;
#line 282 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct inode *whoop_inode_4  ;
#line 283 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct file *whoop_file_4  ;
#line 284 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct inode *whoop_inode_5  ;
#line 285 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct file *whoop_file_5  ;
#line 286 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct inode *whoop_inode_6  ;
#line 287 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct file *whoop_file_6  ;
#line 288 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct pci_dev *whoop_pci_dev  ;
#line 289 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
char const   *whoop_buf  ;
#line 290 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct platform_device *whoop_platform_device  ;
#line 291 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct vm_area_struct *whoop_vm_area_struct  ;
#line 292 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
struct cx_dev *whoop_cx_dev  ;
#line 294 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
poll_table *whoop_poll_table  ;
#line 296 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
loff_t *whoop_loff_t  ;
#line 297 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int whoop_int  ;
#line 301
void default_release(struct inode *inode , struct file *filp ) ;
#line 303 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *scenario_pc8736x_gpio_cdev(void *args ) 
{ 
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;

  {
  {
#line 304
  tmp = malloc(sizeof(struct inode ));
#line 304
  whoop_inode_1 = (struct inode *)tmp;
#line 305
  tmp___0 = malloc(sizeof(struct file ));
#line 305
  whoop_file_1 = (struct file *)tmp___0;
#line 307
  tmp___1 = pc8736x_gpio_open(whoop_inode_1, whoop_file_1);
  }
#line 307
  if (tmp___1 == 0) {
    {
#line 319
    default_release(whoop_inode_1, whoop_file_1);
    }
  } else {

  }
#line 321
  return (0);
}
}
#line 325 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
pthread_t pthread_t_pc8736x_gpio_cdev  ;
#line 327 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int cdev_add(struct cdev *dev , dev_t d , unsigned int n ) 
{ 
  int tmp ;

  {
  {
#line 330
  tmp = pthread_create(& pthread_t_pc8736x_gpio_cdev, (void *)0, & scenario_pc8736x_gpio_cdev,
                       (void *)0);
  }
#line 330
  return (tmp);
}
}
#line 333 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void cdev_del(struct cdev *dev ) 
{ 


  {
  {
#line 335
  pthread_join(pthread_t_pc8736x_gpio_cdev, (void *)0);
  }
#line 336
  return;
}
}
#line 339 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *scenario_pc8736x_gpio_ops(void *args ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
  {
#line 341
  tmp = __VERIFIER_nondet_int();
  }
  {
#line 342
  if (tmp == 0) {
#line 342
    goto case_0;
  } else {

  }
#line 345
  if (tmp == 1) {
#line 345
    goto case_1;
  } else {

  }
#line 348
  if (tmp == 2) {
#line 348
    goto case_2;
  } else {

  }
#line 351
  if (tmp == 3) {
#line 351
    goto case_3;
  } else {

  }
#line 354
  goto switch_default;
  case_0: /* CIL Label */ 
  {
#line 343
  tmp___0 = __VERIFIER_nondet_int();
#line 343
  pc8736x_gpio_get(tmp___0);
  }
#line 344
  goto switch_break;
  case_1: /* CIL Label */ 
  {
#line 346
  tmp___1 = __VERIFIER_nondet_int();
#line 346
  pc8736x_gpio_current(tmp___1);
  }
#line 347
  goto switch_break;
  case_2: /* CIL Label */ 
  {
#line 349
  tmp___2 = __VERIFIER_nondet_int();
#line 349
  tmp___3 = __VERIFIER_nondet_int();
#line 349
  tmp___4 = __VERIFIER_nondet_int();
#line 349
  pc8736x_gpio_configure(tmp___4, tmp___3, tmp___2);
  }
#line 350
  goto switch_break;
  case_3: /* CIL Label */ 
  {
#line 352
  tmp___5 = __VERIFIER_nondet_int();
#line 352
  pc8736x_gpio_change(tmp___5);
  }
#line 353
  goto switch_break;
  switch_default: /* CIL Label */ 
  {
#line 355
  tmp___6 = __VERIFIER_nondet_int();
#line 355
  tmp___7 = __VERIFIER_nondet_int();
#line 355
  pc8736x_gpio_set(tmp___7, tmp___6);
  }
#line 356
  goto switch_break;
  switch_break: /* CIL Label */ ;
  }
#line 359
  return (0);
}
}
#line 363 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
pthread_t pthread_t_pc8736x_gpio_ops  ;
#line 364 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
pthread_t pthread_t_pc8736x_gpio_ops2  ;
#line 366 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int nonseekable_open(struct inode *inode , struct file *filp ) 
{ 
  int res ;
  int tmp ;
  int tmp___0 ;

  {
  {
#line 368
  tmp = pthread_create(& pthread_t_pc8736x_gpio_ops, (void *)0, & scenario_pc8736x_gpio_ops,
                       (void *)0);
#line 368
  res = tmp;
  }
#line 369
  if (res != 0) {
#line 369
    return (res);
  } else {

  }
  {
#line 371
  tmp___0 = pthread_create(& pthread_t_pc8736x_gpio_ops2, (void *)0, & scenario_pc8736x_gpio_ops,
                           (void *)0);
  }
#line 371
  return (tmp___0);
}
}
#line 374 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void default_release(struct inode *inode , struct file *filp ) 
{ 


  {
  {
#line 376
  pthread_join(pthread_t_pc8736x_gpio_ops, (void *)0);
#line 377
  pthread_join(pthread_t_pc8736x_gpio_ops2, (void *)0);
  }
#line 378
  return;
}
}
#line 382 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int pc8736x_gpio_init(void) 
{ 
  int rc ;
  dev_t devid ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct resource *tmp___3 ;

  {
  {
#line 387
  pdev = platform_device_alloc("pc8736x_gpio", 0);
  }
#line 388
  if (! pdev) {
#line 389
    return (-12);
  } else {

  }
  {
#line 391
  rc = platform_device_add(pdev);
  }
#line 392
  if (rc) {
#line 393
    rc = -19;
#line 394
    goto undo_platform_dev_alloc;
  } else {

  }
  {
#line 396
  while (1) {
    while_continue: /* CIL Label */ ;
#line 396
    goto while_break;
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 398
  tmp = pc8736x_superio_present();
  }
#line 398
  if (tmp) {

  } else {
#line 399
    rc = -19;
    {
#line 400
    while (1) {
      while_continue___0: /* CIL Label */ ;
#line 400
      goto while_break___0;
    }
    while_break___0: /* CIL Label */ ;
    }
#line 401
    goto undo_platform_dev_add;
  }
  {
#line 403
  pc8736x_gpio_ops.dev = & pdev->dev;
#line 404
  __VERIFIER_assert((unsigned long )pc8736x_gpio_ops.dev == (unsigned long )(& pdev->dev));
#line 409
  rc = superio_inb(33);
  }
#line 410
  if (! (rc & 1)) {
#line 411
    rc = -19;
    {
#line 412
    while (1) {
      while_continue___1: /* CIL Label */ ;
#line 412
      goto while_break___1;
    }
    while_break___1: /* CIL Label */ ;
    }
#line 413
    goto undo_platform_dev_add;
  } else {

  }
  {
#line 415
  device_select(7);
#line 416
  tmp___0 = superio_inb(48);
  }
#line 416
  if (tmp___0) {

  } else {
#line 417
    rc = -19;
    {
#line 418
    while (1) {
      while_continue___2: /* CIL Label */ ;
#line 418
      goto while_break___2;
    }
    while_break___2: /* CIL Label */ ;
    }
#line 419
    goto undo_platform_dev_add;
  }
  {
#line 423
  tmp___1 = superio_inb(96);
#line 423
  tmp___2 = superio_inb(97);
#line 423
  pc8736x_gpio_base = (tmp___1 << 8) | tmp___2;
#line 426
  tmp___3 = __request_region((void *)0, pc8736x_gpio_base, 16, "pc8736x_gpio", 0);
  }
#line 426
  if (tmp___3) {

  } else {
#line 427
    rc = -19;
    {
#line 428
    while (1) {
      while_continue___3: /* CIL Label */ ;
#line 428
      goto while_break___3;
    }
    while_break___3: /* CIL Label */ ;
    }
#line 430
    goto undo_platform_dev_add;
  }
  {
#line 432
  while (1) {
    while_continue___4: /* CIL Label */ ;
#line 432
    goto while_break___4;
  }
  while_break___4: /* CIL Label */ ;
  }
#line 434
  if (major) {
    {
#line 435
    devid = major << 20;
#line 436
    rc = register_chrdev_region(devid, 32, "pc8736x_gpio");
    }
  } else {
    {
#line 438
    rc = alloc_chrdev_region(& devid, 0, 32, "pc8736x_gpio");
#line 439
    major = devid >> 20;
    }
  }
#line 442
  if (rc < 0) {
    {
#line 443
    while (1) {
      while_continue___5: /* CIL Label */ ;
#line 443
      goto while_break___5;
    }
    while_break___5: /* CIL Label */ ;
    }
#line 444
    goto undo_request_region;
  } else {

  }
#line 446
  if (! major) {
#line 447
    major = rc;
    {
#line 448
    while (1) {
      while_continue___6: /* CIL Label */ ;
#line 448
      goto while_break___6;
    }
    while_break___6: /* CIL Label */ ;
    }
  } else {

  }
  {
#line 451
  pc8736x_init_shadow();
#line 454
  cdev_init(& pc8736x_gpio_cdev, & pc8736x_gpio_fileops);
#line 455
  cdev_add(& pc8736x_gpio_cdev, devid, 32);
  }
#line 457
  return (0);
  undo_request_region: 
  {
#line 460
  __release_region((void *)0, pc8736x_gpio_base, 16);
  }
  undo_platform_dev_add: 
  {
#line 462
  platform_device_del(pdev);
  }
  undo_platform_dev_alloc: 
  {
#line 464
  platform_device_put(pdev);
  }
#line 466
  return (rc);
}
}
#line 469 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void pc8736x_gpio_cleanup(void) 
{ 


  {
  {
#line 471
  while (1) {
    while_continue: /* CIL Label */ ;
#line 471
    goto while_break;
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 473
  cdev_del(& pc8736x_gpio_cdev);
#line 474
  unregister_chrdev_region(major << 20, 32);
#line 475
  __release_region((void *)0, pc8736x_gpio_base, 16);
#line 477
  platform_device_unregister(pdev);
  }
#line 478
  return;
}
}
#line 480 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int (*_whoop_init)(void)  =    & pc8736x_gpio_init;
#line 481 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void (*_whoop_exit)(void)  =    & pc8736x_gpio_cleanup;
#line 485 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *whoop_wrapper_pc8736x_gpio_set(void *args ) 
{ 


  {
  {
#line 487
  pc8736x_gpio_set(whoop_int, whoop_int);
  }
#line 488
  return ((void *)0);
}
}
#line 491 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *whoop_wrapper_pc8736x_gpio_open(void *args ) 
{ 


  {
  {
#line 493
  pc8736x_gpio_open(whoop_inode_1, whoop_file_1);
  }
#line 494
  return ((void *)0);
}
}
#line 497 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *whoop_wrapper_pc8736x_gpio_get(void *args ) 
{ 


  {
  {
#line 499
  pc8736x_gpio_get(whoop_int);
  }
#line 500
  return ((void *)0);
}
}
#line 503 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *whoop_wrapper_pc8736x_gpio_current(void *args ) 
{ 


  {
  {
#line 505
  pc8736x_gpio_current(whoop_int);
  }
#line 506
  return ((void *)0);
}
}
#line 509 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *whoop_wrapper_pc8736x_gpio_configure(void *args ) 
{ 


  {
  {
#line 511
  pc8736x_gpio_configure(whoop_int, whoop_int, whoop_int);
  }
#line 512
  return ((void *)0);
}
}
#line 515 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *whoop_wrapper_pc8736x_gpio_cleanup(void *args ) 
{ 


  {
  {
#line 517
  pc8736x_gpio_cleanup();
  }
#line 518
  return ((void *)0);
}
}
#line 521 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
void *whoop_wrapper_pc8736x_gpio_change(void *args ) 
{ 


  {
  {
#line 523
  pc8736x_gpio_change(whoop_int);
  }
#line 524
  return ((void *)0);
}
}
#line 527 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int old_main(void) 
{ 
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  void *tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  void *tmp___17 ;
  void *tmp___18 ;
  void *tmp___19 ;
  int _whoop_init_result ;
  int tmp___20 ;
  pthread_t pthread_t_pc8736x_gpio_open ;
  pthread_t pthread_t_pc8736x_gpio_change ;

  {
  {
#line 530
  tmp = malloc(sizeof(struct inode ));
#line 530
  whoop_inode_0 = (struct inode *)tmp;
#line 531
  tmp___0 = malloc(sizeof(struct file ));
#line 531
  whoop_file_0 = (struct file *)tmp___0;
#line 532
  tmp___1 = malloc(sizeof(struct inode ));
#line 532
  whoop_inode_1 = (struct inode *)tmp___1;
#line 533
  tmp___2 = malloc(sizeof(struct file ));
#line 533
  whoop_file_1 = (struct file *)tmp___2;
#line 534
  tmp___3 = malloc(sizeof(struct inode ));
#line 534
  whoop_inode_2 = (struct inode *)tmp___3;
#line 535
  tmp___4 = malloc(sizeof(struct file ));
#line 535
  whoop_file_2 = (struct file *)tmp___4;
#line 536
  tmp___5 = malloc(sizeof(struct inode ));
#line 536
  whoop_inode_3 = (struct inode *)tmp___5;
#line 537
  tmp___6 = malloc(sizeof(struct file ));
#line 537
  whoop_file_3 = (struct file *)tmp___6;
#line 538
  tmp___7 = malloc(sizeof(struct inode ));
#line 538
  whoop_inode_4 = (struct inode *)tmp___7;
#line 539
  tmp___8 = malloc(sizeof(struct file ));
#line 539
  whoop_file_4 = (struct file *)tmp___8;
#line 540
  tmp___9 = malloc(sizeof(struct inode ));
#line 540
  whoop_inode_5 = (struct inode *)tmp___9;
#line 541
  tmp___10 = malloc(sizeof(struct file ));
#line 541
  whoop_file_5 = (struct file *)tmp___10;
#line 542
  tmp___11 = malloc(sizeof(struct inode ));
#line 542
  whoop_inode_6 = (struct inode *)tmp___11;
#line 543
  tmp___12 = malloc(sizeof(struct file ));
#line 543
  whoop_file_6 = (struct file *)tmp___12;
#line 544
  tmp___13 = malloc(sizeof(struct pci_dev ));
#line 544
  whoop_pci_dev = (struct pci_dev *)tmp___13;
#line 545
  tmp___14 = malloc(sizeof(char ));
#line 545
  whoop_buf = (char *)tmp___14;
#line 546
  tmp___15 = malloc(sizeof(struct platform_device ));
#line 546
  whoop_platform_device = (struct platform_device *)tmp___15;
#line 547
  tmp___16 = malloc(sizeof(struct vm_area_struct ));
#line 547
  whoop_vm_area_struct = (struct vm_area_struct *)tmp___16;
#line 548
  tmp___17 = malloc(sizeof(struct cx_dev ));
#line 548
  whoop_cx_dev = (struct cx_dev *)tmp___17;
#line 550
  tmp___18 = malloc(sizeof(poll_table ));
#line 550
  whoop_poll_table = (poll_table *)tmp___18;
#line 552
  tmp___19 = malloc(sizeof(loff_t ));
#line 552
  whoop_loff_t = (loff_t *)tmp___19;
#line 553
  whoop_int = __VERIFIER_nondet_int();
#line 554
  __VERIFIER_assume(whoop_int >= 0);
#line 557
  tmp___20 = (*_whoop_init)();
#line 557
  _whoop_init_result = tmp___20;
#line 564
  pthread_create(& pthread_t_pc8736x_gpio_open, (void *)0, & whoop_wrapper_pc8736x_gpio_open,
                 (void *)0);
#line 565
  pthread_create(& pthread_t_pc8736x_gpio_change, (void *)0, & whoop_wrapper_pc8736x_gpio_change,
                 (void *)0);
#line 568
  pthread_join(pthread_t_pc8736x_gpio_open, (void *)0);
#line 569
  pthread_join(pthread_t_pc8736x_gpio_change, (void *)0);
  }
#line 571
  return (0);
}
}
#line 573 "char_pc8736x_gpio.withoutloop.twothreads.fixed.c"
int main(void) 
{ 
  int tmp ;

  {
  {
#line 574
  tmp = pc8736x_gpio_init();
  }
#line 574
  if (tmp == 0) {
    {
#line 575
    pc8736x_gpio_cleanup();
    }
  } else {

  }
#line 578
  return (0);
}
}
